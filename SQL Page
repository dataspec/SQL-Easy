package com.example.sql;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

public class secilenkelime extends AppCompatActivity {

    TextView konu, aciklama, syntax, ornek, ekbilgi;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.secilenkelime);

        TextView konu=(TextView)  findViewById(R.id.id_konu);
        TextView aciklama=(TextView)  findViewById(R.id.id_aciklama);
        TextView syntax=(TextView)  findViewById(R.id.id_syntax);
        TextView ornek=(TextView)  findViewById(R.id.id_ornek);
        TextView ekbilgi=(TextView)  findViewById(R.id.id_ekbilgi);

        Intent x = getIntent();
        String gelenkelime = x.getExtras().getString("secilenkelimeid");

        //EditText kelime = (EditText) findViewById(R.id.id_text);
        //kelime.setText(gelenkelimeid);

        ImageView img=(ImageView) findViewById(R.id.id_image);

           if (gelenkelime.equals("SELECT")){
           konu.setText("SELECT");
           aciklama.setText("The SELECT statement is used to select data from a database.");
           syntax.setText("SELECT column1, column2,.. FROM table_name;");
           ornek.setText("SELECT Name, City FROM Customers;");
           ekbilgi.setText("If you want to select all the fields available in the table, use the following syntax:\n" +
                   "\n" +
                   "SELECT * FROM table_name;");

               int resId = getResources().getIdentifier("selectimg", "drawable", getPackageName());
               img.setImageResource(resId);



           }

           if (gelenkelime.equals("SELECT DISTINCT")){
                konu.setText("SELECT DISTINCT");
                aciklama.setText("The SELECT DISTINCT statement is used to return only distinct values.");
                syntax.setText("SELECT DISTINCT column1, column2,.. FROM table_name;");
                ornek.setText("SELECT DISTINCT emp_name FROM Customers;");
               int resId = getResources().getIdentifier("selectdistinct", "drawable", getPackageName());
               img.setImageResource(resId);
           }

           if (gelenkelime.equals("WHERE")){
                konu.setText("WHERE");
                aciklama.setText("The WHERE clause is used to filter records.");
                syntax.setText("SELECT column1, column2, ...\n" +
                        "FROM table_name\n" +
                        "WHERE condition;");
                ornek.setText("SELECT StudentName FROM School\n" +
                        "WHERE MarksObtained>350;");
                ekbilgi.setText("=\tEqual\t\n" +
                        ">\tGreater than\t\n" +
                        "<\tLess than\t\n" +
                        ">=\tGreater than or equal\t\n" +
                        "<=\tLess than or equal\t\n" +
                        "<>\tNot equal. Note: In some versions of SQL this operator may be written as !=\t\n" +
                        "BETWEEN\tBetween a certain range\t\n" +
                        "LIKE\tSearch for a pattern\t\n" +
                        "IN\tTo specify multiple possible values for a column");
               int resId = getResources().getIdentifier("where", "drawable", getPackageName());
               img.setImageResource(resId);

           }

           if (gelenkelime.equals("AND,OR,NOT")){
                konu.setText("AND,OR,NOT");
                aciklama.setText("The AND operator displays a record if all the conditions separated by AND are TRUE.\n" +
                        "The OR operator displays a record if any of the conditions separated by OR is TRUE.\n" +
                        "The NOT operator displays a record if the condition(s) is NOT TRUE.");
                syntax.setText("SELECT column1, column2, ...\n" +
                        "FROM table_name\n" +
                        "WHERE condition1 AND condition2 AND condition3 ...;");
                ornek.setText("SELECT * FROM Customers\n" +
                        "WHERE Country='Germany' AND City='MÃ¼nich';");}

           if (gelenkelime.equals("ORDER BY")){
                konu.setText("ORDER BY");
                aciklama.setText("The ORDER BY keyword is used to sort the result-set in ascending (Default) or descending (DESC) order.");
                syntax.setText("SELECT column1, column2, ...\n" +
                        "FROM table_name\n" +
                        "ORDER BY column1, column2, ... ASC|DESC;");
                ornek.setText("SELECT * FROM Customers\n" +
                        "ORDER BY EmpName;");
               int resId = getResources().getIdentifier("orderby", "drawable", getPackageName());
               img.setImageResource(resId);
           }

        if (gelenkelime.equals("INSERT INTO")){
            konu.setText("INSERT INTO");
            aciklama.setText("The INSERT INTO statement is used to insert new records in a table.");
            syntax.setText("INSERT INTO table_name (column1, column2, column3, ...)\n" +
                    "VALUES (value1, value2, value3, ...);");
            ornek.setText("INSERT INTO Customers (City, Country)\n" +
                    "VALUES ('Washington', 'USA');");}

        if (gelenkelime.equals("UPDATE")){
            konu.setText("UPDATE");
            aciklama.setText("The UPDATE statement is used to modify the existing records in a table.");
            syntax.setText("UPDATE table_name\n" +
                    "SET column1 = value1, column2 = value2, ...\n" +
                    "WHERE condition;");
            ornek.setText("UPDATE Customers\n" +
                    "SET Country = 'Germany', City= 'Frankfurt'\n" +
                    "WHERE CustomerID = 1;");}

        if (gelenkelime.equals("DELETE")){
            konu.setText("DELETE");
            aciklama.setText("The DELETE statement is used to delete existing records in a table.");
            syntax.setText("DELETE FROM table_name WHERE condition;");
            ornek.setText("DELETE FROM Customers WHERE City='Washington';");}

        if (gelenkelime.equals("MIN(),MAX()")){
            konu.setText("MIN(),MAX()");
            aciklama.setText("The MIN(),MAX() functions returns the smallest/largest value of the selected column.");
            syntax.setText("SELECT MIN/MAX(column_name)\n" +
                    "FROM table_name\n" +
                    "WHERE condition;");
            ornek.setText("SELECT MIN(Price) AS SmallestPrice\n" +
                    "FROM Products;");}
        if (gelenkelime.equals("COUNT(),AVG(),SUM()")){
            konu.setText("COUNT(),AVG(),SUM()");
            aciklama.setText("The COUNT() function returns the number of rows that matches a specified criteria.\n" +
                    "\n" +
                    "The AVG() function returns the average value of a numeric column.\n" +
                    "\n" +
                    "The SUM() function returns the total sum of a numeric column.");
            syntax.setText("SELECT COUNT/AVG/SUM(column_name)\n" +
                    "FROM table_name\n" +
                    "WHERE condition;");
            ornek.setText("SELECT COUNT(City)\n" +
                    "FROM Products;");}
        if (gelenkelime.equals("LIKE")){
            konu.setText("LIKE");
            aciklama.setText("The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.");
            syntax.setText("SELECT column1, column2, ...\n" +
                    "FROM table_name\n" +
                    "WHERE column LIKE pattern;");
            ornek.setText("SELECT * FROM Customers\n" +
                    "WHERE first_name LIKE 'Ba%';");
            ekbilgi.setText("WHERE City LIKE 'a%'\tFinds any values that start with \"a\"\n" +
                    "WHERE xx LIKE '%a'\tFinds any values that end with \"a\"\n" +
                    "WHERE xx LIKE '%or%'\tFinds any values that have \"or\" in any position\n" +
                    "WHERE xx LIKE '_r%'\tFinds any values that have \"r\" in the second position\n" +
                    "WHERE xx LIKE 'a_%_%'\tFinds any values that start with \"a\" and are at least 3 characters in length\n" +
                    "WHERE xx LIKE 'a%o'\tFinds any values that start with \"a\" and ends with \"o\"");
            int resId = getResources().getIdentifier("like", "drawable", getPackageName());
            img.setImageResource(resId);
        }
       if (gelenkelime.equals("IN")){
            konu.setText("IN");
            aciklama.setText("The IN operator allows you to specify multiple values in a WHERE clause.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE column_name IN (value1, value2, ...);\n\n" +
                    "SELECT column_name(s)\n"+
                    "FROM table_name\n " +
                    "WHERE column_name IN (SELECT STATEMENT);");
            ornek.setText("SELECT * FROM Customers\n" +
                    "WHERE Country IN ('Germany', 'France', 'UK');");
        }
        if (gelenkelime.equals("BETWEEN")){
            konu.setText("BETWEEN");
            aciklama.setText("The BETWEEN operator selects values within a given range.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE column_name BETWEEN value1 AND value2;");
            ornek.setText("SELECT * FROM Products\n" +
                    "WHERE Price BETWEEN 200 AND 400;"
            );
        }
        if (gelenkelime.equals("INNER JOIN")){
            konu.setText("INNER JOIN");
            aciklama.setText("The INNER JOIN keyword selects records that have matching values in both tables.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table1\n" +
                    "INNER JOIN table2\n" +
                    "ON table1.column_name = table2.column_name;");
            ornek.setText("SELECT Orders.OrderID, Customers.CustomerName\n" +
                    "FROM Orders\n" +
                    "INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;");
            int resId = getResources().getIdentifier("innerjoin", "drawable", getPackageName());
            img.setImageResource(resId);
        }

        if (gelenkelime.equals("LEFT/RIGHT JOIN")){
            konu.setText("LEFT/RIGHT JOIN");
            aciklama.setText("The LEFT/RIGHT JOIN keyword returns all records from the left/right table (table1), and the matched records from the right/left table (table2). The result is NULL from the right/left side, if there is no match.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table1\n" +
                    "LEFT/RIGHT JOIN table2\n" +
                    "ON table1.column_name = table2.column_name;");
            ornek.setText("SELECT Customers.CustomerName, Orders.OrderID\n" +
                    "FROM Customers\n" +
                    "LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\n" +
                    "ORDER BY Customers.CustomerName;");
            int resId = getResources().getIdentifier("leftrightjoin", "drawable", getPackageName());
            img.setImageResource(resId);
        }

        if (gelenkelime.equals("UNION")){
            konu.setText("UNION");
            aciklama.setText("The UNION operator is used to combine the result-set of two or more SELECT statements.");
            syntax.setText("SELECT column_name(s) FROM table1\n" +
                    "UNION\n" +
                    "SELECT column_name(s) FROM table2;");
            ornek.setText("SELECT City FROM Customers\n" +
                    "UNION\n" +
                    "SELECT City FROM Suppliers\n" +
                    "ORDER BY City;");
            ekbilgi.setText("-Each SELECT statement within UNION must have the same number of columns.\n" +
                    "-The columns must also have similar data types.\n" +
                    "-The columns in each SELECT statement must also be in the same order.");}

        if (gelenkelime.equals("GROUP BY")){
            konu.setText("GROUP BY");
            aciklama.setText("The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE condition\n" +
                    "GROUP BY column_name(s)\n" +
                    "ORDER BY column_name(s);");
            ornek.setText("SELECT COUNT(City), Country\n" +
                    "FROM Customers\n" +
                    "GROUP BY Country;");}

        if (gelenkelime.equals("HAVING")){
            konu.setText("HAVING");
            aciklama.setText("The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE condition\n" +
                    "GROUP BY column_name(s)\n" +
                    "HAVING condition\n" +
                    "ORDER BY column_name(s);");
            ornek.setText("SELECT COUNT(CustomerID), Country\n" +
                    "FROM Customers\n" +
                    "GROUP BY Country\n" +
                    "HAVING COUNT(CustomerID) > 5;");}

        if (gelenkelime.equals("EXIST")){
            konu.setText("EXIST");
            aciklama.setText("The EXISTS operator is used to test for the existence of any record in a subquery.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE EXISTS\n" +
                    "(SELECT column_name FROM table_name WHERE condition);");
            ornek.setText("SELECT SupplierName\n" +
                    "FROM Suppliers\n" +
                    "WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);");}

        if (gelenkelime.equals("ANY/ALL")){
            konu.setText("ANY/ALL");
            aciklama.setText("The ANY and ALL operators are used with a WHERE or HAVING clause and return true if any of the subquery values meet the condition.");
            syntax.setText("SELECT column_name(s)\n" +
                    "FROM table_name\n" +
                    "WHERE column_name operator ANY/ALL\n" +
                    "(SELECT column_name FROM table_name WHERE condition);");
            ornek.setText("SELECT ProductName\n" +
                    "FROM Products\n" +
                    "WHERE ProductID = ANY/ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);");}

        if (gelenkelime.equals("SELECT INTO")){
            konu.setText("SELECT INTO");
            aciklama.setText("The SELECT INTO statement copies data from one table into a new table.");
            syntax.setText("SELECT *\n" +
                    "INTO newtable [IN externaldb]\n" +
                    "FROM oldtable\n" +
                    "WHERE condition;");
            ornek.setText("SELECT ID, CustomerName, City INTO BackupDB\n" +
                    "FROM Customers;");}

        if (gelenkelime.equals("INSERT INTO SELECT")){
            konu.setText("INSERT INTO SELECT");
            aciklama.setText("The INSERT INTO SELECT statement copies data from one table and inserts it into another table.");
            syntax.setText("INSERT INTO table2\n" +
                    "SELECT * FROM table1\n" +
                    "WHERE condition;");
            ornek.setText("INSERT INTO Customers (CustomerName, City, Country)\n" +
                    "SELECT SupplierName, City, Country FROM Suppliers;");}


        if (gelenkelime.equals("CREATE DB")){
            konu.setText("CREATE DB");
            aciklama.setText("The CREATE DATABASE statement is used to create a new SQL database.");
            syntax.setText("CREATE DATABASE databasename;");
            ornek.setText("CREATE DATABASE CustomersDB;");}

        if (gelenkelime.equals("CREATE TABLE")){
            konu.setText("CREATE TABLE");
            aciklama.setText("The CREATE TABLE statement is used to create a new table in a database.");
            syntax.setText("CREATE TABLE table_name (\n" +
                    "    column1 datatype,\n" +
                    "    column2 datatype,\n" +
                    "    column3 datatype,\n" +
                    "   ....\n" +
                    ");");
            ornek.setText("CREATE TABLE Customers (\n" +
                    "    PersonID int,\n" +
                    "    LastName varchar(255),\n" +
                    "    FirstName varchar(255),\n" +
                    "    Address varchar(255),\n" +
                    "    City varchar(255) \n" +
                    ");");}

        if (gelenkelime.equals("DROP/TRUNCATE TABLE")){
            konu.setText("DROP/TRUNCATE TABLE DB");
            aciklama.setText("The DROP TABLE statement is used to drop an existing table in a database.The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.");
            syntax.setText("DROP/TRUNCATE TABLE table_name;");
            ornek.setText("DROP/TRUNCATE TABLE Customers;");}
        if (gelenkelime.equals("ALTER TABLE")){
            konu.setText("ALTER TABLE");
            aciklama.setText("The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.");
            syntax.setText("ALTER TABLE table_name\n" +
                    "ADD column_name datatype;\n\n" +
                    "ALTER TABLE table_name\n" +
                    "DROP COLUMN column_name;\n\n" +
                    "ALTER TABLE table_name\n" +
                    "ALTER COLUMN column_name datatype;");
            ornek.setText("ALTER TABLE Customers\n" +
                    "ADD Email varchar(255);\n\n" +
                    "ALTER TABLE Customers\n" +
                    "DROP COLUMN Email;");}

        if (gelenkelime.equals("CONSTRAINTS")){
            konu.setText("CONSTRAINTS");
            aciklama.setText("SQL constraints are used to specify rules for data in a table.");
            syntax.setText("CREATE TABLE table_name (\n" +
                    "    column1 datatype constraint,\n" +
                    "    column2 datatype constraint,...);");
            ornek.setText("NOT NULL - A column cannot have a NULL value\n" +
                    "UNIQUE - All values in a column are different\n" +
                    "PRIMARY KEY - A combination of a NOT NULL and UNIQUE.\n" +
                    "FOREIGN KEY - Uniquely identifies a row/record in another table\n" +
                    "DEFAULT - Sets a default value for a column when no value is specified\n" +
                    "INDEX - Used to create and retrieve data from the database very quickly\n");}

        if (gelenkelime.equals("VIEW")){
            konu.setText("VIEW");
            aciklama.setText("A view is a virtual table based on the result-set of an SQL statement.");
            syntax.setText("CREATE VIEW view_name AS\n" +
                    "SELECT column1, column2, ...\n" +
                    "FROM table_name\n" +
                    "WHERE condition;");
            ornek.setText("CREATE VIEW [Customers] AS\n" +
                    "SELECT CustomerName, City\n" +
                    "FROM Customers\n" +
                    "WHERE Country = \"USA\";");}

        if (gelenkelime.equals("SQL Keywords")){
            konu.setText("SQL Keywords");
            aciklama.setText("SQL keywords reference");
            syntax.setText(" ");
            ornek.setText(" ");
            ekbilgi.setText("ADD\tAdds a column in an existing table\n" +
                    "ADD CONSTRAINT\tAdds a constraint after a table is already created\n" +
                    "ALTER\tAdds, deletes, or modifies columns in a table, or changes the data type of a column in a table\n" +
                    "ALTER COLUMN\tChanges the data type of a column in a table\n" +
                    "ALTER TABLE\tAdds, deletes, or modifies columns in a table\n" +
                    "ALL\tReturns true if all of the subquery values meet the condition\n" +
                    "AND\tOnly includes rows where both conditions is true\n" +
                    "ANY\tReturns true if any of the subquery values meet the condition\n" +
                    "AS\tRenames a column or table with an alias\n" +
                    "ASC\tSorts the result set in ascending order\n" +
                    "BACKUP DATABASE\tCreates a back up of an existing database\n" +
                    "BETWEEN\tSelects values within a given range\n" +
                    "CASE\tCreates different outputs based on conditions\n" +
                    "CHECK\tA constraint that limits the value that can be placed in a column\n" +
                    "COLUMN\tChanges the data type of a column or deletes a column in a table\n" +
                    "CONSTRAINT\tAdds or deletes a constraint\n" +
                    "CREATE\tCreates a database, index, view, table, or procedure\n" +
                    "CREATE DATABASE\tCreates a new SQL database\n" +
                    "CREATE INDEX\tCreates an index on a table (allows duplicate values)\n" +
                    "CREATE OR REPLACE VIEW\tUpdates a view\n" +
                    "CREATE TABLE\tCreates a new table in the database\n" +
                    "CREATE PROCEDURE\tCreates a stored procedure\n" +
                    "CREATE UNIQUE INDEX\tCreates a unique index on a table (no duplicate values)\n" +
                    "CREATE VIEW\tCreates a view based on the result set of a SELECT statement\n" +
                    "DATABASE\tCreates or deletes an SQL database\n" +
                    "DEFAULT\tA constraint that provides a default value for a column\n" +
                    "DELETE\tDeletes rows from a table\n" +
                    "DESC\tSorts the result set in descending order\n" +
                    "DISTINCT\tSelects only distinct (different) values\n" +
                    "DROP\tDeletes a column, constraint, database, index, table, or view\n" +
                    "DROP COLUMN\tDeletes a column in a table\n" +
                    "DROP CONSTRAINT\tDeletes a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint\n" +
                    "DROP DATABASE\tDeletes an existing SQL database\n" +
                    "DROP DEFAULT\tDeletes a DEFAULT constraint\n" +
                    "DROP INDEX\tDeletes an index in a table\n" +
                    "DROP TABLE\tDeletes an existing table in the database\n" +
                    "DROP VIEW\tDeletes a view\n" +
                    "EXEC\tExecutes a stored procedure\n" +
                    "EXISTS\tTests for the existence of any record in a subquery\n" +
                    "FOREIGN KEY\tA constraint that is a key used to link two tables together\n" +
                    "FROM\tSpecifies which table to select or delete data from\n" +
                    "FULL OUTER JOIN\tReturns all rows when there is a match in either left table or right table\n" +
                    "GROUP BY\tGroups the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG)\n" +
                    "HAVING\tUsed instead of WHERE with aggregate functions\n" +
                    "IN\tAllows you to specify multiple values in a WHERE clause\n" +
                    "INDEX\tCreates or deletes an index in a table\n" +
                    "INNER JOIN\tReturns rows that have matching values in both tables\n" +
                    "INSERT INTO\tInserts new rows in a table\n" +
                    "INSERT INTO SELECT\tCopies data from one table into another table\n" +
                    "IS NULL\tTests for empty values\n" +
                    "IS NOT NULL\tTests for non-empty values\n" +
                    "JOIN\tJoins tables\n" +
                    "LEFT JOIN\tReturns all rows from the left table, and the matching rows from the right table\n" +
                    "LIKE\tSearches for a specified pattern in a column\n" +
                    "LIMIT\tSpecifies the number of records to return in the result set\n" +
                    "NOT\tOnly includes rows where a condition is not true\n" +
                    "NOT NULL\tA constraint that enforces a column to not accept NULL values\n" +
                    "OR\tIncludes rows where either condition is true\n" +
                    "ORDER BY\tSorts the result set in ascending or descending order\n" +
                    "OUTER JOIN\tReturns all rows when there is a match in either left table or right table\n" +
                    "PRIMARY KEY\tA constraint that uniquely identifies each record in a database table\n" +
                    "PROCEDURE\tA stored procedure\n" +
                    "RIGHT JOIN\tReturns all rows from the right table, and the matching rows from the left table\n" +
                    "ROWNUM\tSpecifies the number of records to return in the result set\n" +
                    "SELECT\tSelects data from a database\n" +
                    "SELECT DISTINCT\tSelects only distinct (different) values\n" +
                    "SELECT INTO\tCopies data from one table into a new table\n" +
                    "SELECT TOP\tSpecifies the number of records to return in the result set\n" +
                    "SET\tSpecifies which columns and values that should be updated in a table\n" +
                    "TABLE\tCreates a table, or adds, deletes, or modifies columns in a table, or deletes a table or data inside a table\n" +
                    "TOP\tSpecifies the number of records to return in the result set\n" +
                    "TRUNCATE TABLE\tDeletes the data inside a table, but not the table itself\n" +
                    "UNION\tCombines the result set of two or more SELECT statements (only distinct values)\n" +
                    "UNION ALL\tCombines the result set of two or more SELECT statements (allows duplicate values)\n" +
                    "UNIQUE\tA constraint that ensures that all values in a column are unique\n" +
                    "UPDATE\tUpdates existing rows in a table\n" +
                    "VALUES\tSpecifies the values of an INSERT INTO statement\n" +
                    "VIEW\tCreates, updates, or deletes a view\n" +
                    "WHERE\tFilters a result set to include only records that fulfill a specified condition");}





        //-----------------
    }
    }

